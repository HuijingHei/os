#!/usr/bin/python3 -u

# This is a hacky temporary script to apply an rpm-ostree manifest as part of a
# derived container build. It's only required because we're in this transitional
# state where some streams use the old way, and others use layering. Once all
# streams use layering, we could stop using manifests for the layered bits. (An
# obvious question here is whether we should keep extending the `rpm-ostree ex
# rebuild` stuff to keep using manifests even in a layered build. Though likely
# similar functionality will live in dnf instead.)

# Note this only supports the subset of the manifest spec actually used in
# `packages-openshift.yaml`.

import os
import shutil
import subprocess
import sys
import yaml


def runcmd(args):
    print("Running:", ' '.join(args))
    subprocess.check_call(args)


manifest_file = sys.argv[1]
manifest_dir = os.path.dirname(manifest_file)

with open(manifest_file) as f:
    manifest = yaml.safe_load(f)

if len(manifest.get('packages', [])):

    packages = []
    for pkg in manifest['packages']:
        packages += pkg.split()
    dnf_install = ['dnf', 'install', '--setopt=tsflags=nodocs', '--noplugins', '-y'] + packages

    # XXX: temporary hack for cri-o, which wants to create dirs under /opt
    # https://github.com/CentOS/centos-bootc/issues/393
    if 'cri-o' in packages:
        os.makedirs("/var/opt", exist_ok=True)

    # inject mounted-in repo files
    extra_repos_dir = '/run/yum.repos.d'
    copied_repo_files = []
    if os.path.isdir(extra_repos_dir):
        for file in os.listdir(extra_repos_dir):
            src_path = os.path.join(extra_repos_dir, file)
            if not os.path.isfile(src_path):
                continue
            if not file.endswith(".repo"):
                continue
            dest_path = os.path.join('/etc/yum.repos.d', file)
            if os.path.exists(dest_path):
                raise Exception(f"Repo file {dest_path} already exists")
            print(f"Copying repo file {file} to /etc/yum.repos.d/")
            shutil.copy(src_path, dest_path)
            copied_repo_files += [dest_path]

    runcmd(dnf_install)

    # delete the repo files we injected
    for repo in copied_repo_files:
        os.unlink(repo)


if len(manifest.get('postprocess', [])):
    for i, script in enumerate(manifest['postprocess']):
        name = f"/tmp/postprocess-script-{i}"
        with open(name, 'w') as f:
            f.write(script)
        os.chmod(name, 0o755)
        runcmd([name])
        os.unlink(name)
